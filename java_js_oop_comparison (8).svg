<svg viewBox="0 0 1400 1200" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="1400" height="1200" fill="#f8f9fa"/>
  
  <!-- Title -->
  <rect x="50" y="20" width="1300" height="50" fill="#2c3e50" rx="8"/>
  <text x="700" y="50" text-anchor="middle" fill="white" font-size="20" font-weight="bold">
    Java vs JavaScript: 객체, 인스턴스, 프로퍼티, 메서드 완전 분석
  </text>
  
  <!-- Divider -->
  <line x1="700" y1="90" x2="700" y2="1150" stroke="#6c757d" stroke-width="3" stroke-dasharray="10,5"/>
  <text x="700" y="110" text-anchor="middle" fill="#6c757d" font-size="14" font-weight="bold">VS</text>
  
  <!-- Java Header -->
  <rect x="70" y="90" width="580" height="40" fill="#f44336" rx="5"/>
  <text x="360" y="115" text-anchor="middle" fill="white" font-size="16" font-weight="bold">
    Java - 클래스 기반 엄격한 구조
  </text>
  
  <!-- JavaScript Header -->
  <rect x="750" y="90" width="580" height="40" fill="#ffc107" rx="5"/>
  <text x="1040" y="115" text-anchor="middle" fill="white" font-size="16" font-weight="bold">
    JavaScript - 프로토타입 기반 동적 구조
  </text>
  
  <!-- 1. Object Structure -->
  <rect x="70" y="150" width="580" height="120" fill="#ffebee" stroke="#f44336" stroke-width="2" rx="5"/>
  <text x="360" y="175" text-anchor="middle" fill="#d32f2f" font-size="14" font-weight="bold">
    1. 객체 구조 정의
  </text>
  <rect x="80" y="185" width="560" height="75" fill="#ffffff" stroke="#f44336" rx="3"/>
  <text x="90" y="205" fill="#2c3e50" font-size="10" font-family="monospace">public class Person {</text>
  <text x="90" y="220" fill="#2c3e50" font-size="10" font-family="monospace">  private String name;</text>
  <text x="90" y="235" fill="#2c3e50" font-size="10" font-family="monospace">  public void speak() {}</text>
  <text x="90" y="250" fill="#2c3e50" font-size="10" font-family="monospace">}</text>
  
  <rect x="750" y="150" width="580" height="120" fill="#fff8e1" stroke="#ffc107" stroke-width="2" rx="5"/>
  <text x="1040" y="175" text-anchor="middle" fill="#f57f17" font-size="14" font-weight="bold">
    1. 객체 구조 정의
  </text>
  <rect x="760" y="185" width="560" height="75" fill="#ffffff" stroke="#ffc107" rx="3"/>
  <text x="770" y="205" fill="#2c3e50" font-size="10" font-family="monospace">function Person(name) {</text>
  <text x="770" y="220" fill="#2c3e50" font-size="10" font-family="monospace">  this.name = name;</text>
  <text x="770" y="235" fill="#2c3e50" font-size="10" font-family="monospace">  this.speak = function() {};</text>
  <text x="770" y="250" fill="#2c3e50" font-size="10" font-family="monospace">}</text>
  
  <!-- 2. Field vs Property -->
  <rect x="70" y="290" width="580" height="140" fill="#f3e5f5" stroke="#9c27b0" stroke-width="2" rx="5"/>
  <text x="360" y="315" text-anchor="middle" fill="#7b1fa2" font-size="14" font-weight="bold">
    2. 필드 (Field)
  </text>
  <text x="80" y="335" fill="#7b1fa2" font-size="12" font-weight="bold">Java 필드 특징:</text>
  <text x="80" y="350" fill="#2c3e50" font-size="11">- 접근제어자: private, protected, public</text>
  <text x="80" y="365" fill="#2c3e50" font-size="11">- 타입 명시 필수</text>
  <text x="80" y="380" fill="#2c3e50" font-size="11">- 컴파일 타임 검증</text>
  <rect x="80" y="395" width="560" height="25" fill="#ffffff" stroke="#9c27b0" rx="3"/>
  <text x="90" y="410" fill="#7b1fa2" font-size="10" font-family="monospace">private String name;</text>
  
  <rect x="750" y="290" width="580" height="140" fill="#e8f5e8" stroke="#4caf50" stroke-width="2" rx="5"/>
  <text x="1040" y="315" text-anchor="middle" fill="#388e3c" font-size="14" font-weight="bold">
    2. 프로퍼티 (Property)
  </text>
  <text x="760" y="335" fill="#388e3c" font-size="12" font-weight="bold">JavaScript 프로퍼티 특징:</text>
  <text x="760" y="350" fill="#2c3e50" font-size="11">- 접근제어자 없음</text>
  <text x="760" y="365" fill="#2c3e50" font-size="11">- 타입 지정 없음</text>
  <text x="760" y="380" fill="#2c3e50" font-size="11">- 런타임에 추가/삭제 가능</text>
  <rect x="760" y="395" width="560" height="25" fill="#ffffff" stroke="#4caf50" rx="3"/>
  <text x="770" y="410" fill="#388e3c" font-size="10" font-family="monospace">person.name = "Alice";</text>
  
  <!-- 3. Method -->
  <rect x="70" y="450" width="580" height="140" fill="#e3f2fd" stroke="#2196f3" stroke-width="2" rx="5"/>
  <text x="360" y="475" text-anchor="middle" fill="#1976d2" font-size="14" font-weight="bold">
    3. 메서드
  </text>
  <text x="80" y="495" fill="#1976d2" font-size="12" font-weight="bold">Java 메서드:</text>
  <text x="80" y="510" fill="#2c3e50" font-size="11">- 클래스 내부에서만 정의</text>
  <text x="80" y="525" fill="#2c3e50" font-size="11">- this는 현재 인스턴스 고정</text>
  <text x="80" y="540" fill="#2c3e50" font-size="11">- 오버로딩/오버라이딩 지원</text>
  <rect x="80" y="555" width="560" height="25" fill="#ffffff" stroke="#2196f3" rx="3"/>
  <text x="90" y="570" fill="#1976d2" font-size="10" font-family="monospace">person.speak();</text>
  
  <rect x="750" y="450" width="580" height="140" fill="#fce4ec" stroke="#e91e63" stroke-width="2" rx="5"/>
  <text x="1040" y="475" text-anchor="middle" fill="#c2185b" font-size="14" font-weight="bold">
    3. 메서드
  </text>
  <text x="760" y="495" fill="#c2185b" font-size="12" font-weight="bold">JavaScript 메서드:</text>
  <text x="760" y="510" fill="#2c3e50" font-size="11">- 함수가 객체 프로퍼티로 저장</text>
  <text x="760" y="525" fill="#2c3e50" font-size="11">- this는 호출 방식에 따라 결정</text>
  <text x="760" y="540" fill="#2c3e50" font-size="11">- 런타임에 추가/변경 가능</text>
  <rect x="760" y="555" width="560" height="25" fill="#ffffff" stroke="#e91e63" rx="3"/>
  <text x="770" y="570" fill="#c2185b" font-size="10" font-family="monospace">person.speak.call(obj);</text>
  
  <!-- 4. Static vs Instance -->
  <rect x="70" y="610" width="580" height="140" fill="#fff3e0" stroke="#ff9800" stroke-width="2" rx="5"/>
  <text x="360" y="635" text-anchor="middle" fill="#f57c00" font-size="14" font-weight="bold">
    4. 정적 vs 인스턴스
  </text>
  <text x="80" y="655" fill="#f57c00" font-size="12" font-weight="bold">Java:</text>
  <text x="80" y="670" fill="#2c3e50" font-size="11">- static: 클래스에 속함</text>
  <text x="80" y="685" fill="#2c3e50" font-size="11">- 인스턴스: 각 객체마다 개별</text>
  <text x="80" y="700" fill="#2c3e50" font-size="11">- static에서 인스턴스 접근 불가</text>
  <rect x="80" y="715" width="560" height="25" fill="#ffffff" stroke="#ff9800" rx="3"/>
  <text x="90" y="730" fill="#f57c00" font-size="10" font-family="monospace">public static int count;</text>
  
  <rect x="750" y="610" width="580" height="140" fill="#f1f8e9" stroke="#8bc34a" stroke-width="2" rx="5"/>
  <text x="1040" y="635" text-anchor="middle" fill="#689f38" font-size="14" font-weight="bold">
    4. 정적 vs 인스턴스
  </text>
  <text x="760" y="655" fill="#689f38" font-size="12" font-weight="bold">JavaScript:</text>
  <text x="760" y="670" fill="#2c3e50" font-size="11">- 생성자에 직접 할당 = 정적</text>
  <text x="760" y="685" fill="#2c3e50" font-size="11">- this에 할당 = 인스턴스</text>
  <text x="760" y="700" fill="#2c3e50" font-size="11">- 프로토타입 = 공유</text>
  <rect x="760" y="715" width="560" height="25" fill="#ffffff" stroke="#8bc34a" rx="3"/>
  <text x="770" y="730" fill="#689f38" font-size="10" font-family="monospace">Person.count = 0;</text>
  
  <!-- 5. Access Control -->
  <rect x="70" y="770" width="580" height="140" fill="#f9fbe7" stroke="#827717" stroke-width="2" rx="5"/>
  <text x="360" y="795" text-anchor="middle" fill="#827717" font-size="14" font-weight="bold">
    5. 접근 제어
  </text>
  <text x="80" y="815" fill="#827717" font-size="12" font-weight="bold">Java:</text>
  <text x="80" y="830" fill="#2c3e50" font-size="11">- private: 클래스 내부만</text>
  <text x="80" y="845" fill="#2c3e50" font-size="11">- protected: 상속 클래스</text>
  <text x="80" y="860" fill="#2c3e50" font-size="11">- public: 어디서든</text>
  <rect x="80" y="875" width="560" height="25" fill="#ffffff" stroke="#827717" rx="3"/>
  <text x="90" y="890" fill="#827717" font-size="10" font-family="monospace">컴파일러가 강제 검증</text>
  
  <rect x="750" y="770" width="580" height="140" fill="#e0f2f1" stroke="#00695c" stroke-width="2" rx="5"/>
  <text x="1040" y="795" text-anchor="middle" fill="#00695c" font-size="14" font-weight="bold">
    5. 접근 제어
  </text>
  <text x="760" y="815" fill="#00695c" font-size="12" font-weight="bold">JavaScript:</text>
  <text x="760" y="830" fill="#2c3e50" font-size="11">- 기본적으로 모든 것이 public</text>
  <text x="760" y="845" fill="#2c3e50" font-size="11">- ES2022: # private 필드</text>
  <text x="760" y="860" fill="#2c3e50" font-size="11">- 클로저로 프라이버시 구현</text>
  <rect x="760" y="875" width="560" height="25" fill="#ffffff" stroke="#00695c" rx="3"/>
  <text x="770" y="890" fill="#00695c" font-size="10" font-family="monospace">런타임에 접근 제어</text>
  
  <!-- Interview Questions -->
  <rect x="50" y="930" width="1300" height="120" fill="#2c3e50" rx="8"/>
  <text x="700" y="955" text-anchor="middle" fill="white" font-size="16" font-weight="bold">
    면접 필수 질문과 답변
  </text>
  
  <rect x="70" y="970" width="300" height="50" fill="#34495e" rx="5"/>
  <text x="220" y="990" text-anchor="middle" fill="#f39c12" font-size="11" font-weight="bold">Q1: 프로퍼티와 필드 차이?</text>
  <text x="80" y="1005" fill="#ecf0f1" font-size="9">A: 타입 시스템과 접근 방식 차이</text>
  
  <rect x="390" y="970" width="300" height="50" fill="#34495e" rx="5"/>
  <text x="540" y="990" text-anchor="middle" fill="#f39c12" font-size="11" font-weight="bold">Q2: this 바인딩 차이?</text>
  <text x="400" y="1005" fill="#ecf0f1" font-size="9">A: 고정 vs 동적 결정</text>
  
  <rect x="710" y="970" width="300" height="50" fill="#34495e" rx="5"/>
  <text x="860" y="990" text-anchor="middle" fill="#f39c12" font-size="11" font-weight="bold">Q3: 접근 제어자 차이?</text>
  <text x="720" y="1005" fill="#ecf0f1" font-size="9">A: 컴파일 vs 런타임 제어</text>
  
  <rect x="1030" y="970" width="300" height="50" fill="#34495e" rx="5"/>
  <text x="1180" y="990" text-anchor="middle" fill="#f39c12" font-size="11" font-weight="bold">Q4: 메서드 호출 방식?</text>
  <text x="1040" y="1005" fill="#ecf0f1" font-size="9">A: 고정 vs call/apply/bind</text>
  
  <!-- Summary -->
  <rect x="70" y="1040" width="580" height="30" fill="#f44336" rx="5"/>
  <text x="360" y="1060" text-anchor="middle" fill="white" font-size="12" font-weight="bold">
    Java: 컴파일 타임 + 강타입 + 정적
  </text>
  
  <rect x="750" y="1040" width="580" height="30" fill="#ffc107" rx="5"/>
  <text x="1040" y="1060" text-anchor="middle" fill="white" font-size="12" font-weight="bold">
    JavaScript: 런타임 + 동적타입 + 유연
  </text>
</svg>