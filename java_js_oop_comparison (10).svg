<svg viewBox="0 0 1800 1400" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="1800" height="1400" fill="#f8f9fa"/>
  
  <!-- Title -->
  <rect x="50" y="20" width="1700" height="60" fill="#2c3e50" rx="10"/>
  <text x="900" y="55" text-anchor="middle" fill="white" font-size="24" font-weight="bold">
    JavaScript 프로토타입 체인과 동적 객체 생성 vs Java 정적 구조
  </text>
  
  <!-- Divider Line -->
  <line x1="900" y1="100" x2="900" y2="1350" stroke="#6c757d" stroke-width="4" stroke-dasharray="15,10"/>
  <text x="900" y="125" text-anchor="middle" fill="#6c757d" font-size="16" font-weight="bold">VS</text>
  
  <!-- JavaScript Side Header -->
  <rect x="50" y="100" width="820" height="50" fill="#ffc107" rx="8"/>
  <text x="460" y="130" text-anchor="middle" fill="white" font-size="18" font-weight="bold">
    🚀 JAVASCRIPT - 프로토타입 체인과 동적 생성
  </text>
  
  <!-- Java Side Header -->
  <rect x="930" y="100" width="820" height="50" fill="#f44336" rx="8"/>
  <text x="1340" y="130" text-anchor="middle" fill="white" font-size="18" font-weight="bold">
    ☕ JAVA - 정적 클래스 기반 구조
  </text>
  
  <!-- JavaScript: Step 1 - Constructor Definition -->
  <rect x="70" y="170" width="800" height="80" fill="#fff8e1" stroke="#ffc107" stroke-width="2" rx="8"/>
  <text x="470" y="195" text-anchor="middle" fill="#f57f17" font-size="14" font-weight="bold">
    1단계: 생성자 함수 정의
  </text>
  <rect x="80" y="205" width="780" height="35" fill="#ffffff" stroke="#ffc107" rx="5"/>
  <text x="90" y="225" fill="#2c3e50" font-size="11" font-family="monospace">function Person(name) { this.name = name; }</text>
  <text x="90" y="240" fill="#2c3e50" font-size="11" font-family="monospace">Person.prototype.greet = function() { return "Hello " + this.name; };</text>
  
  <!-- Java: Step 1 - Class Definition -->
  <rect x="950" y="170" width="800" height="80" fill="#ffebee" stroke="#f44336" stroke-width="2" rx="8"/>
  <text x="1350" y="195" text-anchor="middle" fill="#d32f2f" font-size="14" font-weight="bold">
    1단계: 클래스 정의 (컴파일 타임 확정)
  </text>
  <rect x="960" y="205" width="780" height="35" fill="#ffffff" stroke="#f44336" rx="5"/>
  <text x="970" y="225" fill="#2c3e50" font-size="11" font-family="monospace">public class Person { private String name; public Person(String name) {...} }</text>
  <text x="970" y="240" fill="#2c3e50" font-size="11" font-family="monospace">// 구조가 컴파일 타임에 완전히 확정됨</text>
  
  <!-- JavaScript: Step 2 - new Keyword Process -->
  <rect x="70" y="270" width="800" height="120" fill="#e8f5e8" stroke="#4caf50" stroke-width="2" rx="8"/>
  <text x="470" y="295" text-anchor="middle" fill="#388e3c" font-size="14" font-weight="bold">
    2단계: new 키워드 동작 과정 (4단계)
  </text>
  <text x="80" y="315" fill="#388e3c" font-size="12" font-weight="bold">const person = new Person("Alice");</text>
  <text x="80" y="335" fill="#2c3e50" font-size="11">1. 빈 객체 {} 생성</text>
  <text x="80" y="350" fill="#2c3e50" font-size="11">2. 새 객체의 __proto__를 Person.prototype에 연결</text>
  <text x="80" y="365" fill="#2c3e50" font-size="11">3. Person 함수를 this=새객체로 호출</text>
  <text x="80" y="380" fill="#2c3e50" font-size="11">4. 생성자가 객체를 반환하지 않으면 새 객체 반환</text>
  
  <!-- Java: Step 2 - new Keyword Process -->
  <rect x="950" y="270" width="800" height="120" fill="#f3e5f5" stroke="#9c27b0" stroke-width="2" rx="8"/>
  <text x="1350" y="295" text-anchor="middle" fill="#7b1fa2" font-size="14" font-weight="bold">
    2단계: new 키워드 동작 과정
  </text>
  <text x="960" y="315" fill="#7b1fa2" font-size="12" font-weight="bold">Person person = new Person("Alice");</text>
  <text x="960" y="335" fill="#2c3e50" font-size="11">1. 힙 메모리에 객체 공간 할당</text>
  <text x="960" y="350" fill="#2c3e50" font-size="11">2. 인스턴스 변수를 기본값으로 초기화</text>
  <text x="960" y="365" fill="#2c3e50" font-size="11">3. 생성자 호출하여 초기화</text>
  <text x="960" y="380" fill="#2c3e50" font-size="11">4. 객체 참조 반환 (구조 변경 불가)</text>
  
  <!-- JavaScript: Prototype Chain Visualization -->
  <rect x="70" y="410" width="800" height="200" fill="#e3f2fd" stroke="#2196f3" stroke-width="2" rx="8"/>
  <text x="470" y="435" text-anchor="middle" fill="#1976d2" font-size="14" font-weight="bold">
    3단계: 프로토타입 체인 연결 구조
  </text>
  
  <!-- Person Instance -->
  <rect x="90" y="450" width="150" height="80" fill="#ffffff" stroke="#2196f3" rx="5"/>
  <text x="165" y="470" text-anchor="middle" fill="#1976d2" font-size="11" font-weight="bold">person 객체</text>
  <text x="100" y="485" fill="#2c3e50" font-size="10">name: "Alice"</text>
  <text x="100" y="500" fill="#2c3e50" font-size="10">__proto__: →</text>
  <text x="100" y="515" fill="#666" font-size="9">(Person.prototype)</text>
  
  <!-- Person.prototype -->
  <rect x="280" y="450" width="150" height="80" fill="#ffffff" stroke="#2196f3" rx="5"/>
  <text x="355" y="470" text-anchor="middle" fill="#1976d2" font-size="11" font-weight="bold">Person.prototype</text>
  <text x="290" y="485" fill="#2c3e50" font-size="10">greet: function</text>
  <text x="290" y="500" fill="#2c3e50" font-size="10">constructor: Person</text>
  <text x="290" y="515" fill="#2c3e50" font-size="10">__proto__: →</text>
  
  <!-- Object.prototype -->
  <rect x="470" y="450" width="150" height="80" fill="#ffffff" stroke="#2196f3" rx="5"/>
  <text x="545" y="470" text-anchor="middle" fill="#1976d2" font-size="11" font-weight="bold">Object.prototype</text>
  <text x="480" y="485" fill="#2c3e50" font-size="10">toString: function</text>
  <text x="480" y="500" fill="#2c3e50" font-size="10">valueOf: function</text>
  <text x="480" y="515" fill="#2c3e50" font-size="10">__proto__: null</text>
  
  <!-- Prototype chain arrows -->
  <defs>
    <marker id="arrowBlue" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#2196f3"/>
    </marker>
  </defs>
  
  <line x1="240" y1="490" x2="280" y2="490" stroke="#2196f3" stroke-width="2" marker-end="url(#arrowBlue)"/>
  <line x1="430" y1="490" x2="470" y2="490" stroke="#2196f3" stroke-width="2" marker-end="url(#arrowBlue)"/>
  
  <!-- Property Access Example -->
  <rect x="80" y="540" width="780" height="60" fill="#f0f4c3" stroke="#827717" rx="5"/>
  <text x="470" y="560" text-anchor="middle" fill="#827717" font-size="12" font-weight="bold">프로퍼티 접근 시 체인 탐색</text>
  <text x="90" y="575" fill="#2c3e50" font-size="10">person.greet() → person에 없음 → Person.prototype에서 발견!</text>
  <text x="90" y="590" fill="#2c3e50" font-size="10">person.toString() → person, Person.prototype에 없음 → Object.prototype에서 발견!</text>
  
  <!-- Java: Static Structure -->
  <rect x="950" y="410" width="800" height="200" fill="#fff3e0" stroke="#ff9800" stroke-width="2" rx="8"/>
  <text x="1350" y="435" text-anchor="middle" fill="#f57c00" font-size="14" font-weight="bold">
    3단계: 정적 클래스 상속 구조
  </text>
  
  <!-- Java Class Hierarchy -->
  <rect x="970" y="450" width="150" height="80" fill="#ffffff" stroke="#ff9800" rx="5"/>
  <text x="1045" y="470" text-anchor="middle" fill="#f57c00" font-size="11" font-weight="bold">Person 인스턴스</text>
  <text x="980" y="485" fill="#2c3e50" font-size="10">name: "Alice"</text>
  <text x="980" y="500" fill="#2c3e50" font-size="10">greet() 메서드</text>
  <text x="980" y="515" fill="#666" font-size="9">(컴파일 시 확정)</text>
  
  <rect x="1160" y="450" width="150" height="80" fill="#ffffff" stroke="#ff9800" rx="5"/>
  <text x="1235" y="470" text-anchor="middle" fill="#f57c00" font-size="11" font-weight="bold">Person 클래스</text>
  <text x="1170" y="485" fill="#2c3e50" font-size="10">extends Object</text>
  <text x="1170" y="500" fill="#2c3e50" font-size="10">메서드 정의</text>
  <text x="1170" y="515" fill="#666" font-size="9">(상속 관계 고정)</text>
  
  <rect x="1350" y="450" width="150" height="80" fill="#ffffff" stroke="#ff9800" rx="5"/>
  <text x="1425" y="470" text-anchor="middle" fill="#f57c00" font-size="11" font-weight="bold">Object 클래스</text>
  <text x="1360" y="485" fill="#2c3e50" font-size="10">toString()</text>
  <text x="1360" y="500" fill="#2c3e50" font-size="10">equals()</text>
  <text x="1360" y="515" fill="#666" font-size="9">(최상위 클래스)</text>
  
  <rect x="970" y="540" width="760" height="60" fill="#f0f4c3" stroke="#827717" rx="5"/>
  <text x="1350" y="560" text-anchor="middle" fill="#827717" font-size="12" font-weight="bold">메서드 호출 시 정적 디스패치</text>
  <text x="980" y="575" fill="#2c3e50" font-size="10">person.greet() → 컴파일 타임에 Person.greet() 메서드로 바인딩</text>
  <text x="980" y="590" fill="#2c3e50" font-size="10">person.toString() → 컴파일 타임에 오버라이드된 메서드 또는 Object.toString() 호출</text>
  
  <!-- JavaScript: Dynamic Property Addition -->
  <rect x="70" y="630" width="800" height="160" fill="#fce4ec" stroke="#e91e63" stroke-width="2" rx="8"/>
  <text x="470" y="655" text-anchor="middle" fill="#c2185b" font-size="14" font-weight="bold">
    4단계: 런타임 동적 속성 추가/삭제
  </text>
  
  <rect x="80" y="670" width="780" height="110" fill="#ffffff" stroke="#e91e63" rx="5"/>
  <text x="90" y="690" fill="#c2185b" font-size="12" font-weight="bold">동적 속성 조작 (런타임):</text>
  <text x="90" y="710" fill="#2c3e50" font-size="11">person.age = 25; // 새 속성 추가</text>
  <text x="90" y="725" fill="#2c3e50" font-size="11">person.hobby = "coding"; // 또 다른 속성 추가</text>
  <text x="90" y="740" fill="#2c3e50" font-size="11">delete person.name; // 속성 삭제</text>
  <text x="90" y="755" fill="#2c3e50" font-size="11">Person.prototype.newMethod = function() {}; // 프로토타입에 메서드 추가</text>
  <text x="90" y="770" fill="#666" font-size="10">// 모든 Person 인스턴스에서 즉시 사용 가능!</text>
  
  <!-- Java: Static Structure Limitation -->
  <rect x="950" y="630" width="800" height="160" fill="#ffcdd2" stroke="#d32f2f" stroke-width="2" rx="8"/>
  <text x="1350" y="655" text-anchor="middle" fill="#d32f2f" font-size="14" font-weight="bold">
    4단계: 정적 구조 제한사항
  </text>
  
  <rect x="960" y="670" width="780" height="110" fill="#ffffff" stroke="#d32f2f" rx="5"/>
  <text x="970" y="690" fill="#d32f2f" font-size="12" font-weight="bold">컴파일 타임 구조 확정:</text>
  <text x="970" y="710" fill="#2c3e50" font-size="11">// person.age = 25; // 컴파일 에러! 필드가 정의되지 않음</text>
  <text x="970" y="725" fill="#2c3e50" font-size="11">// person.hobby = "coding"; // 컴파일 에러!</text>
  <text x="970" y="740" fill="#2c3e50" font-size="11">// 런타임에 클래스 구조 변경 불가능</text>
  <text x="970" y="755" fill="#666" font-size="10">리플렉션 API로 제한적 동적 접근 가능하지만 복잡함</text>
  <text x="970" y="770" fill="#666" font-size="10">안전성과 성능을 위해 의도적으로 제한</text>
  
  <!-- Memory Comparison -->
  <rect x="70" y="810" width="800" height="140" fill="#f1f8e9" stroke="#8bc34a" stroke-width="2" rx="8"/>
  <text x="470" y="835" text-anchor="middle" fill="#689f38" font-size="14" font-weight="bold">
    메모리 구조: 프로토타입 공유
  </text>
  
  <rect x="80" y="850" width="780" height="90" fill="#ffffff" stroke="#8bc34a" rx="5"/>
  <text x="90" y="870" fill="#689f38" font-size="12" font-weight="bold">효율적인 메모리 사용:</text>
  <text x="90" y="885" fill="#2c3e50" font-size="11">• 메서드는 prototype에서 공유 (메모리 절약)</text>
  <text x="90" y="900" fill="#2c3e50" font-size="11">• 각 인스턴스는 고유 데이터만 저장</text>
  <text x="90" y="915" fill="#2c3e50" font-size="11">• 프로토타입 체인으로 상속 구현</text>
  <text x="90" y="930" fill="#666" font-size="10">const person2 = new Person("Bob"); // person2도 같은 prototype 공유</text>
  
  <rect x="950" y="810" width="800" height="140" fill="#e8eaf6" stroke="#3f51b5" stroke-width="2" rx="8"/>
  <text x="1350" y="835" text-anchor="middle" fill="#3f51b5" font-size="14" font-weight="bold">
    메모리 구조: 독립적 할당
  </text>
  
  <rect x="960" y="850" width="780" height="90" fill="#ffffff" stroke="#3f51b5" rx="5"/>
  <text x="970" y="870" fill="#3f51b5" font-size="12" font-weight="bold">예측 가능한 메모리 사용:</text>
  <text x="970" y="885" fill="#2c3e50" font-size="11">• 각 인스턴스가 독립적인 메모리 공간</text>
  <text x="970" y="900" fill="#2c3e50" font-size="11">• 메서드는 각 인스턴스별로 바인딩</text>
  <text x="970" y="915" fill="#2c3e50" font-size="11">• 가상 메서드 테이블(vtable)로 다형성 지원</text>
  <text x="970" y="930" fill="#666" font-size="10">Person person2 = new Person("Bob"); // 완전히 독립적인 객체</text>
  
  <!-- Final Comparison -->
  <rect x="50" y="970" width="1700" height="160" fill="#2c3e50" rx="10"/>
  <text x="900" y="1000" text-anchor="middle" fill="white" font-size="18" font-weight="bold">
    핵심 차이점 요약
  </text>
  
  <rect x="70" y="1020" width="400" height="100" fill="#34495e" rx="5"/>
  <text x="270" y="1040" text-anchor="middle" fill="#ffc107" font-size="14" font-weight="bold">🚀 JavaScript 특징</text>
  <text x="80" y="1055" fill="#ecf0f1" font-size="11">✓ 프로토타입 체인으로 상속</text>
  <text x="80" y="1070" fill="#ecf0f1" font-size="11">✓ 런타임에 속성/메서드 추가/삭제</text>
  <text x="80" y="1085" fill="#ecf0f1" font-size="11">✓ 동적이고 유연한 구조</text>
  <text x="80" y="1100" fill="#ecf0f1" font-size="11">✓ 메모리 효율적 (prototype 공유)</text>
  
  <rect x="490" y="1020" width="400" height="100" fill="#34495e" rx="5"/>
  <text x="690" y="1040" text-anchor="middle" fill="#f44336" font-size="14" font-weight="bold">☕ Java 특징</text>
  <text x="500" y="1055" fill="#ecf0f1" font-size="11">✓ 클래스 기반 상속</text>
  <text x="500" y="1070" fill="#ecf0f1" font-size="11">✓ 컴파일 타임에 구조 확정</text>
  <text x="500" y="1085" fill="#ecf0f1" font-size="11">✓ 정적이고 안전한 구조</text>
  <text x="500" y="1100" fill="#ecf0f1" font-size="11">✓ 예측 가능한 성능</text>
  
  <rect x="910" y="1020" width="400" height="100" fill="#34495e" rx="5"/>
  <text x="1110" y="1040" text-anchor="middle" fill="#e91e63" font-size="14" font-weight="bold">🎯 실무 선택 기준</text>
  <text x="920" y="1055" fill="#ecf0f1" font-size="11">JavaScript: 웹개발, 빠른 프로토타이핑</text>
  <text x="920" y="1070" fill="#ecf0f1" font-size="11">Java: 대규모 시스템, 안정성 중시</text>
  <text x="920" y="1085" fill="#ecf0f1" font-size="11">TypeScript: 두 언어의 장점 결합</text>
  <text x="920" y="1100" fill="#ecf0f1" font-size="11">최신 트렌드: 타입 안전성 + 유연성</text>
  
  <rect x="1330" y="1020" width="400" height="100" fill="#34495e" rx="5"/>
  <text x="1530" y="1040" text-anchor="middle" fill="#9c27b0" font-size="14" font-weight="bold">🔥 면접 핵심 포인트</text>
  <text x="1340" y="1055" fill="#ecf0f1" font-size="11">Q: 프로토타입 체인이란?</text>
  <text x="1340" y="1070" fill="#ecf0f1" font-size="11">A: __proto__로 연결된 상속 구조</text>
  <text x="1340" y="1085" fill="#ecf0f1" font-size="11">Q: 동적 속성 추가가 가능한 이유?</text>
  <text x="1340" y="1100" fill="#ecf0f1" font-size="11">A: 런타임에 객체 구조 변경 가능</text>
</svg>