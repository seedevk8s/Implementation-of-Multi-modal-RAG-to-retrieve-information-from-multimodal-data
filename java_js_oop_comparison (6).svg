<svg viewBox="0 0 1600 1400" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="1600" height="1400" fill="#f8f9fa"/>
  
  <!-- Title -->
  <rect x="50" y="20" width="1500" height="60" fill="#2c3e50" rx="10"/>
  <text x="800" y="55" text-anchor="middle" fill="white" font-size="24" font-weight="bold">
    Java vs JavaScript: 객체, 인스턴스, 프로퍼티, 메서드 완전 분석 (취준생 필수!)
  </text>
  
  <!-- Divider Line -->
  <line x1="800" y1="100" x2="800" y2="1350" stroke="#6c757d" stroke-width="3" stroke-dasharray="10,5"/>
  <text x="800" y="120" text-anchor="middle" fill="#6c757d" font-size="16" font-weight="bold">VS</text>
  
  <!-- Java Side Header -->
  <rect x="50" y="100" width="720" height="50" fill="#f44336" rx="8"/>
  <text x="410" y="130" text-anchor="middle" fill="white" font-size="18" font-weight="bold">
    ☕ JAVA - 클래스 기반 엄격한 구조
  </text>
  
  <!-- JavaScript Side Header -->
  <rect x="830" y="100" width="720" height="50" fill="#ffc107" rx="8"/>
  <text x="1190" y="130" text-anchor="middle" fill="white" font-size="18" font-weight="bold">
    🚀 JAVASCRIPT - 프로토타입 기반 동적 구조
  </text>
  
  <!-- 1. Object Structure -->
  <rect x="70" y="170" width="700" height="140" fill="#ffebee" stroke="#f44336" stroke-width="2" rx="8"/>
  <rect x="80" y="180" width="680" height="30" fill="#f44336" rx="5"/>
  <text x="420" y="200" text-anchor="middle" fill="white" font-size="14" font-weight="bold">
    1️⃣ 객체 구조 정의 (필드 + 메서드)
  </text>
  
  <rect x="90" y="220" width="660" height="80" fill="#ffffff" stroke="#f44336" rx="5"/>
  <text x="100" y="240" fill="#d32f2f" font-size="11" font-family="monospace">// Java - 컴파일 타임에 구조 확정</text>
  <text x="100" y="255" fill="#2c3e50" font-size="10" font-family="monospace">public class Person {</text>
  <text x="100" y="270" fill="#2c3e50" font-size="10" font-family="monospace">  private String name; // 필드</text>
  <text x="100" y="285" fill="#2c3e50" font-size="10" font-family="monospace">  public void speak() {} // 메서드</text>
  <text x="100" y="300" fill="#2c3e50" font-size="10" font-family="monospace">}</text>
  
  <rect x="850" y="170" width="700" height="140" fill="#fff8e1" stroke="#ffc107" stroke-width="2" rx="8"/>
  <rect x="860" y="180" width="680" height="30" fill="#ffc107" rx="5"/>
  <text x="1200" y="200" text-anchor="middle" fill="white" font-size="14" font-weight="bold">
    1️⃣ 객체 구조 정의 (프로퍼티 + 메서드)
  </text>
  
  <rect x="870" y="220" width="660" height="80" fill="#ffffff" stroke="#ffc107" rx="5"/>
  <text x="880" y="240" fill="#f57f17" font-size="11" font-family="monospace">// JavaScript - 런타임에 동적 변경</text>
  <text x="880" y="255" fill="#2c3e50" font-size="10" font-family="monospace">function Person(name) {</text>
  <text x="880" y="270" fill="#2c3e50" font-size="10" font-family="monospace">  this.name = name; // 프로퍼티</text>
  <text x="880" y="285" fill="#2c3e50" font-size="10" font-family="monospace">  this.speak = function() {};</text>
  <text x="880" y="300" fill="#2c3e50" font-size="10" font-family="monospace">}</text>
  
  <!-- 2. Property vs Field -->
  <rect x="70" y="330" width="700" height="160" fill="#f3e5f5" stroke="#9c27b0" stroke-width="2" rx="8"/>
  <rect x="80" y="340" width="680" height="30" fill="#9c27b0" rx="5"/>
  <text x="420" y="360" text-anchor="middle" fill="white" font-size="14" font-weight="bold">
    2️⃣ 필드 (Field) - 데이터 저장
  </text>
  
  <text x="90" y="385" fill="#7b1fa2" font-size="12" font-weight="bold">🔒 Java 필드 특징:</text>
  <text x="90" y="400" fill="#2c3e50" font-size="11">• 접근제어자: private, protected, public</text>
  <text x="90" y="415" fill="#2c3e50" font-size="11">• 타입 명시 필수: String, int, boolean</text>
  <text x="90" y="430" fill="#2c3e50" font-size="11">• 컴파일 타임 검증</text>
  
  <rect x="90" y="445" width="660" height="35" fill="#ffffff" stroke="#9c27b0" rx="3"/>
  <text x="100" y="465" fill="#7b1fa2" font-size="10" font-family="monospace">private String name; // 외부 직접 접근 불가</text>
  
  <rect x="850" y="330" width="700" height="160" fill="#e8f5e8" stroke="#4caf50" stroke-width="2" rx="8"/>
  <rect x="860" y="340" width="680" height="30" fill="#4caf50" rx="5"/>
  <text x="1200" y="360" text-anchor="middle" fill="white" font-size="14" font-weight="bold">
    2️⃣ 프로퍼티 (Property) - 키-값 쌍
  </text>
  
  <text x="870" y="385" fill="#388e3c" font-size="12" font-weight="bold">🔓 JavaScript 프로퍼티 특징:</text>
  <text x="870" y="400" fill="#2c3e50" font-size="11">• 접근제어자 없음 (모든 속성 public)</text>
  <text x="870" y="415" fill="#2c3e50" font-size="11">• 타입 지정 없음 (동적 타입)</text>
  <text x="870" y="430" fill="#2c3e50" font-size="11">• 런타임에 자유롭게 추가/삭제</text>
  
  <rect x="870" y="445" width="660" height="35" fill="#ffffff" stroke="#4caf50" rx="3"/>
  <text x="880" y="465" fill="#388e3c" font-size="10" font-family="monospace">person.name = "Alice"; // 직접 접근 가능</text>
  
  <!-- 3. Method -->
  <rect x="70" y="510" width="700" height="160" fill="#e3f2fd" stroke="#2196f3" stroke-width="2" rx="8"/>
  <rect x="80" y="520" width="680" height="30" fill="#2196f3" rx="5"/>
  <text x="420" y="540" text-anchor="middle" fill="white" font-size="14" font-weight="bold">
    3️⃣ 메서드 정의와 호출
  </text>
  
  <text x="90" y="565" fill="#1976d2" font-size="12" font-weight="bold">⚙️ Java 메서드:</text>
  <text x="90" y="580" fill="#2c3e50" font-size="11">• 클래스 내부에서만 정의</text>
  <text x="90" y="595" fill="#2c3e50" font-size="11">• this는 현재 인스턴스 고정 참조</text>
  <text x="90" y="610" fill="#2c3e50" font-size="11">• 오버로딩/오버라이딩 지원</text>
  
  <rect x="90" y="625" width="660" height="35" fill="#ffffff" stroke="#2196f3" rx="3"/>
  <text x="100" y="645" fill="#1976d2" font-size="10" font-family="monospace">person.speak(); // this = 현재 인스턴스 고정</text>
  
  <rect x="850" y="510" width="700" height="160" fill="#fce4ec" stroke="#e91e63" stroke-width="2" rx="8"/>
  <rect x="860" y="520" width="680" height="30" fill="#e91e63" rx="5"/>
  <text x="1200" y="540" text-anchor="middle" fill="white" font-size="14" font-weight="bold">
    3️⃣ 메서드 정의와 호출
  </text>
  
  <text x="870" y="565" fill="#c2185b" font-size="12" font-weight="bold">⚙️ JavaScript 메서드:</text>
  <text x="870" y="580" fill="#2c3e50" font-size="11">• 함수가 객체 프로퍼티로 저장</text>
  <text x="870" y="595" fill="#2c3e50" font-size="11">• this는 호출 방식에 따라 동적 결정</text>
  <text x="870" y="610" fill="#2c3e50" font-size="11">• 런타임에 동적 추가/변경 가능</text>
  
  <rect x="870" y="625" width="660" height="35" fill="#ffffff" stroke="#e91e63" rx="3"/>
  <text x="880" y="645" fill="#c2185b" font-size="10" font-family="monospace">person.speak.call(obj); // this 명시적 바인딩</text>
  
  <!-- 4. Static vs Instance -->
  <rect x="70" y="690" width="700" height="160" fill="#fff3e0" stroke="#ff9800" stroke-width="2" rx="8"/>
  <rect x="80" y="700" width="680" height="30" fill="#ff9800" rx="5"/>
  <text x="420" y="720" text-anchor="middle" fill="white" font-size="14" font-weight="bold">
    4️⃣ 정적 vs 인스턴스 멤버
  </text>
  
  <text x="90" y="745" fill="#f57c00" font-size="12" font-weight="bold">🏛️ Java 정적/인스턴스:</text>
  <text x="90" y="760" fill="#2c3e50" font-size="11">• static: 클래스에 속함, 모든 인스턴스 공유</text>
  <text x="90" y="775" fill="#2c3e50" font-size="11">• 인스턴스: 각 객체마다 개별 복사본</text>
  <text x="90" y="790" fill="#2c3e50" font-size="11">• static 메서드에서 인스턴스 멤버 접근 불가</text>
  
  <rect x="90" y="805" width="660" height="35" fill="#ffffff" stroke="#ff9800" rx="3"/>
  <text x="100" y="825" fill="#f57c00" font-size="10" font-family="monospace">public static int count; // 모든 인스턴스 공유</text>
  
  <rect x="850" y="690" width="700" height="160" fill="#f1f8e9" stroke="#8bc34a" stroke-width="2" rx="8"/>
  <rect x="860" y="700" width="680" height="30" fill="#8bc34a" rx="5"/>
  <text x="1200" y="720" text-anchor="middle" fill="white" font-size="14" font-weight="bold">
    4️⃣ 정적 vs 인스턴스 프로퍼티
  </text>
  
  <text x="870" y="745" fill="#689f38" font-size="12" font-weight="bold">🏛️ JavaScript 정적/인스턴스:</text>
  <text x="870" y="760" fill="#2c3e50" font-size="11">• 생성자 함수에 직접 할당 = 정적</text>
  <text x="870" y="775" fill="#2c3e50" font-size="11">• this에 할당 = 인스턴스별 고유</text>
  <text x="870" y="790" fill="#2c3e50" font-size="11">• 프로토타입에 할당 = 모든 인스턴스 공유</text>
  
  <rect x="870" y="805" width="660" height="35" fill="#ffffff" stroke="#8bc34a" rx="3"/>
  <text x="880" y="825" fill="#689f38" font-size="10" font-family="monospace">Person.count = 0; // 정적 프로퍼티</text>
  
  <!-- 5. Access Control -->
  <rect x="70" y="870" width="700" height="160" fill="#f9fbe7" stroke="#827717" stroke-width="2" rx="8"/>
  <rect x="80" y="880" width="680" height="30" fill="#827717" rx="5"/>
  <text x="420" y="900" text-anchor="middle" fill="white" font-size="14" font-weight="bold">
    5️⃣ 접근 제어와 캡슐화
  </text>
  
  <text x="90" y="925" fill="#827717" font-size="12" font-weight="bold">🔐 Java 접근 제어:</text>
  <text x="90" y="940" fill="#2c3e50" font-size="11">• private: 클래스 내부에서만</text>
  <text x="90" y="955" fill="#2c3e50" font-size="11">• protected: 상속받은 클래스에서</text>
  <text x="90" y="970" fill="#2c3e50" font-size="11">• public: 어디서든 접근 가능</text>
  
  <rect x="90" y="985" width="660" height="35" fill="#ffffff" stroke="#827717" rx="3"/>
  <text x="100" y="1005" fill="#827717" font-size="10" font-family="monospace">// person.name = "error"; // 컴파일 에러!</text>
  
  <rect x="850" y="870" width="700" height="160" fill="#e0f2f1" stroke="#00695c" stroke-width="2" rx="8"/>
  <rect x="860" y="880" width="680" height="30" fill="#00695c" rx="5"/>
  <text x="1200" y="900" text-anchor="middle" fill="white" font-size="14" font-weight="bold">
    5️⃣ 접근 제어와 프라이버시
  </text>
  
  <text x="870" y="925" fill="#00695c" font-size="12" font-weight="bold">🔓 JavaScript 접근 제어:</text>
  <text x="870" y="940" fill="#2c3e50" font-size="11">• 기본적으로 모든 프로퍼티가 public</text>
  <text x="870" y="955" fill="#2c3e50" font-size="11">• ES2022: # private 필드 지원</text>
  <text x="870" y="970" fill="#2c3e50" font-size="11">• 클로저, Symbol로 프라이버시 구현</text>
  
  <rect x="870" y="985" width="660" height="35" fill="#ffffff" stroke="#00695c" rx="3"/>
  <text x="880" y="1005" fill="#00695c" font-size="10" font-family="monospace">class Person { #name; } // ES2022 private</text>
  
  <!-- Interview Section -->
  <rect x="50" y="1050" width="1500" height="180" fill="#2c3e50" rx="10"/>
  <text x="800" y="1080" text-anchor="middle" fill="white" font-size="18" font-weight="bold">
    🔥 면접 필수 질문 & 답변
  </text>
  
  <rect x="70" y="1100" width="350" height="60" fill="#34495e" rx="5"/>
  <text x="245" y="1120" text-anchor="middle" fill="#f39c12" font-size="12" font-weight="bold">Q1: 프로퍼티와 필드 차이는?</text>
  <text x="80" y="1135" fill="#ecf0f1" font-size="10">A: Java 필드는 타입+접근제어자 필수</text>
  <text x="80" y="1150" fill="#ecf0f1" font-size="10">JS 프로퍼티는 런타임 자유 추가/삭제</text>
  
  <rect x="440" y="1100" width="350" height="60" fill="#34495e" rx="5"/>
  <text x="615" y="1120" text-anchor="middle" fill="#f39c12" font-size="12" font-weight="bold">Q2: this 바인딩 차이는?</text>
  <text x="450" y="1135" fill="#ecf0f1" font-size="10">A: Java this는 컴파일 타임 고정</text>
  <text x="450" y="1150" fill="#ecf0f1" font-size="10">JS this는 호출 방식에 따라 동적</text>
  
  <rect x="810" y="1100" width="350" height="60" fill="#34495e" rx="5"/>
  <text x="985" y="1120" text-anchor="middle" fill="#f39c12" font-size="12" font-weight="bold">Q3: 접근 제어자 차이는?</text>
  <text x="820" y="1135" fill="#ecf0f1" font-size="10">A: Java는 private/protected/public</text>
  <text x="820" y="1150" fill="#ecf0f1" font-size="10">JS는 기본 public, ES2022 # private</text>
  
  <rect x="1180" y="1100" width="350" height="60" fill="#34495e" rx="5"/>
  <text x="1355" y="1120" text-anchor="middle" fill="#f39c12" font-size="12" font-weight="bold">Q4: 메서드 호출 방식은?</text>
  <text x="1190" y="1135" fill="#ecf0f1" font-size="10">A: Java는 인스턴스.메서드() 고정</text>
  <text x="1190" y="1150" fill="#ecf0f1" font-size="10">JS는 call, apply, bind로 this 변경</text>
  
  <!-- Final Summary -->
  <rect x="70" y="1180" width="700" height="40" fill="#34495e" rx="5"/>
  <text x="420" y="1205" text-anchor="middle" fill="#f44336" font-size="12" font-weight="bold">☕ Java: 컴파일 타임 + 강타입 + 정적 구조</text>
  
  <rect x="830" y="1180" width="700" height="40" fill="#34495e" rx="5"/>
  <text x="1180" y="1205" text-anchor="middle" fill="#ffc107" font-size="12" font-weight="bold">🚀 JavaScript: 런타임 + 동적타입 + 유연한 구조</text>
</svg>